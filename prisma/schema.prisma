generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Boards {
  board_id        String           @id @db.Uuid
  title           String?          @db.VarChar(255)
  url             String?          @unique @db.VarChar(100)
  board_is_active Boolean
  user_id         String           @db.Uuid
  workspace_id    String           @db.Uuid
  created_at      DateTime         @default(now()) @db.Timestamp(6)
  deleted_at      DateTime?        @db.Timestamp(6)
  updated_at      DateTime?        @db.Timestamp(6)
  Users           Users            @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  Workspaces      Workspaces       @relation(fields: [workspace_id], references: [workspace_id], onDelete: Cascade)
  Lists           Lists[]
  Members_boards  Members_boards[]
}

model Lists {
  list_id        String    @id @db.Uuid
  title          String    @db.VarChar(200)
  list_is_active Boolean?
  user_id        String    @db.Uuid
  board_id       String    @db.Uuid
  created_at     DateTime  @default(now()) @db.Timestamp(6)
  deleted_at     DateTime? @db.Timestamp(6)
  indice         Int       @db.SmallInt
  updated_at     DateTime? @db.Timestamp(6)
  Boards         Boards    @relation(fields: [board_id], references: [board_id], onDelete: Cascade)
  Users          Users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  Tasks          Tasks[]
}

model Members_boards {
  member_board_id            String                       @id @db.Uuid
  created_at                 DateTime                     @default(now()) @db.Timestamp(6)
  removed_at                 DateTime?                    @db.Timestamp(6)
  user_id                    String                       @db.Uuid
  board_id                   String                       @db.Uuid
  Boards                     Boards                       @relation(fields: [board_id], references: [board_id], onDelete: Cascade)
  Users                      Users                        @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  Members_boards_permissions Members_boards_permissions[]
}

model Members_boards_permissions {
  member_board_permission_id String         @id @db.Uuid
  member_board_id            String         @db.Uuid
  permission_id              String         @db.Uuid
  Members_boards             Members_boards @relation(fields: [member_board_id], references: [member_board_id], onDelete: Cascade)
  Permissions                Permissions    @relation(fields: [permission_id], references: [permission_id], onDelete: Cascade)
}

model Members_tasks {
  member_task_id            String                      @id @db.Uuid
  created_at                DateTime                    @default(now()) @db.Timestamp(6)
  removed_at                DateTime?                   @db.Timestamp(6)
  user_id                   String                      @db.Uuid
  task_id                   String                      @db.Uuid
  Tasks                     Tasks                       @relation(fields: [task_id], references: [task_id], onDelete: Cascade)
  Users                     Users                       @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  Members_tasks_permissions Members_tasks_permissions[]
}

model Members_tasks_permissions {
  member_task_permission_id String        @id @db.Uuid
  member_task_id            String        @db.Uuid
  permission_id             String        @db.Uuid
  Members_tasks             Members_tasks @relation(fields: [member_task_id], references: [member_task_id], onDelete: Cascade)
  Permissions               Permissions   @relation(fields: [permission_id], references: [permission_id], onDelete: Cascade)
}

model Members_workspaces {
  member_workspace_id            String                           @id @db.Uuid
  created_at                     DateTime                         @default(now()) @db.Timestamp(6)
  removed_at                     DateTime?                        @db.Timestamp(6)
  user_id                        String                           @db.Uuid
  workspace_id                   String                           @db.Uuid
  Users                          Users                            @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  Workspaces                     Workspaces                       @relation(fields: [workspace_id], references: [workspace_id], onDelete: Cascade)
  Members_workspaces_permissions Members_workspaces_permissions[]
}

model Members_workspaces_permissions {
  member_workspace_permission_id String             @id @db.Uuid
  member_workspace_id            String             @db.Uuid
  permission_id                  String             @db.Uuid
  Members_workspaces             Members_workspaces @relation(fields: [member_workspace_id], references: [member_workspace_id], onDelete: Cascade)
  Permissions                    Permissions        @relation(fields: [permission_id], references: [permission_id], onDelete: Cascade)
}

model Permissions {
  permission_id                  String                           @id @db.Uuid
  name                           String                           @default("reader") @db.VarChar(20)
  description                    String?                          @db.VarChar(50)
  created_at                     DateTime                         @default(now()) @db.Timestamp(6)
  removed_at                     DateTime?                        @db.Timestamp(6)
  permission_is_active           Boolean?
  Members_boards_permissions     Members_boards_permissions[]
  Members_tasks_permissions      Members_tasks_permissions[]
  Members_workspaces_permissions Members_workspaces_permissions[]
  Users_permissions              Users_permissions[]
}

model Tasks {
  task_id        String          @id @db.Uuid
  title          String          @db.VarChar(255)
  url            String          @unique @db.VarChar(100)
  task_is_active Boolean
  user_id        String          @db.Uuid
  list_id        String          @db.Uuid
  description    String?
  tag            String?         @db.VarChar(60)
  created_at     DateTime        @default(now()) @db.Timestamp(6)
  deleted_at     DateTime?       @db.Timestamp(6)
  updated_at     DateTime?       @db.Timestamp(6)
  indice         Int             @db.SmallInt
  Members_tasks  Members_tasks[]
  Lists          Lists           @relation(fields: [list_id], references: [list_id], onDelete: Cascade)
  Users          Users           @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model Users {
  user_id            String               @id @db.Uuid
  name               String               @db.VarChar(255)
  image_file         String?              @db.VarChar(255)
  identifier         String?              @db.VarChar(255)
  email              String               @unique @db.VarChar(80)
  password           String               @db.VarChar(80)
  user_is_active     Boolean
  user_payment_id    String?              @db.VarChar(20)
  Boards             Boards[]
  Lists              Lists[]
  Members_boards     Members_boards[]
  Members_tasks      Members_tasks[]
  Members_workspaces Members_workspaces[]
  Tasks              Tasks[]
  Users_permissions  Users_permissions[]
  Workspaces         Workspaces[]
}

model Users_permissions {
  users_permission_id String      @id @db.Uuid
  user_id             String      @db.Uuid
  permission_id       String      @db.Uuid
  Permissions         Permissions @relation(fields: [permission_id], references: [permission_id], onDelete: Cascade)
  Users               Users       @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model Workspaces {
  workspace_id        String               @id @db.Uuid
  title               String               @db.VarChar(255)
  url                 String               @db.VarChar(100)
  tag                 String?              @db.VarChar(100)
  description         String?              @db.VarChar(255)
  workspaces_type     String?              @db.VarChar(200)
  workspace_is_active Boolean
  user_id             String               @db.Uuid
  created_at          DateTime             @default(now()) @db.Timestamp(6)
  deleted_at          DateTime?            @db.Timestamp(6)
  updated_at          DateTime?            @db.Timestamp(6)
  Boards              Boards[]
  Members_workspaces  Members_workspaces[]
  Users               Users                @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}
